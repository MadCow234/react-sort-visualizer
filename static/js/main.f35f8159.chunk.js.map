{"version":3,"sources":["services/arrayHelpers.js","components/navigation/_Navigation.js","components/sort/visualizer/Column.js","components/sort/visualizer/_Visualizer.js","App.js","hooks/useSortAlgorithm.js","hooks/useInterval.js","serviceWorker.js","index.js"],"names":["getRandomArray","array","Array","from","Math","floor","random","console","log","StyledNavigation","styled","div","StyledButton","button","Navigation","startSort","stepSort","onClick","StyledColumn","props","height","color","React","memo","index","Container","Visualizer","movingIndex","column","useCallback","value","key","map","Content","App","useState","stage","setStage","setMovingIndex","length","i","j","temp","stepBubbleSort","useSortAlgorithm","step","isRunning","setIsRunning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f35f8159.chunk.js","sourcesContent":["export const getRandomArray = () => {\r\n  const array = Array.from(new Array(Math.floor((Math.random() * 60) + 40)), () => Math.floor((Math.random() * 499) + 1));\r\n  console.log(array);\r\n  return array;\r\n}\r\n\r\nexport const stepBubbleSort = (array) => {\r\n  const length = array.length;\r\n  for (let i = 0; i < length; i++) {\r\n    for (let j = 1; j < length - i; j++) {\r\n      if (array[j - 1] > array[j]) {\r\n        let temp = array[j - 1];\r\n        array[j - 1] = array[j];\r\n        array[j] = temp;\r\n        return [array, j - 1, false];\r\n      }\r\n    }\r\n  }\r\n  return [array, -1, true];\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledNavigation = styled.div`\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 4em;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  background: rgb(191, 191, 191);\r\n  border-radius: 3px;\r\n  border: 2px solid cyan;\r\n  margin: 1em 1em;\r\n  padding: 0.25em 1em;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-size: 18px;\r\n  color: cyan;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Navigation = ({startSort, stepSort}) => (\r\n    <StyledNavigation>\r\n      <StyledButton onClick={startSort} >Start</StyledButton>\r\n      <StyledButton onClick={stepSort} >Step</StyledButton>\r\n    </StyledNavigation>\r\n)\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColumn = styled.div`\r\n  height: ${props => props.height + 'px'};\r\n  background-color: ${props => props.color};\r\n  border: 1px solid black;\r\n  width: 6px;\r\n`;\r\n\r\nconst Column = ({height, index, color}) => (\r\n  <StyledColumn height={height} index={index} color={color}>{console.log('column re-render')}</StyledColumn>\r\n)\r\n\r\nexport default React.memo(Column);","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Components\r\nimport Column from './Column';\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  background-color: rgb(191, 191, 191);\r\n  transform: rotateX(180deg);\r\n`;\r\n\r\nconst Visualizer = ({array, movingIndex}) => {\r\n  console.log('visualizer re-render');\r\n\r\n  const column = useCallback((value, index, movingIndex) => {\r\n    return <Column key={index} height={value} index={index} color={index === movingIndex ? \"darkgreen\" : \"cyan\"} />;\r\n  }, []);\r\n        \r\n  return (\r\n    <Container>\r\n      {array.map((value, index) => column(value, index, movingIndex))}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Visualizer;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { getRandomArray } from './services/arrayHelpers';\n\n// Components\nimport Navigation from './components/navigation/_Navigation';\nimport Visualizer from './components/sort/visualizer/_Visualizer';\n\n// Custom hooks\nimport { useSortAlgorithm } from './hooks/useSortAlgorithm';\nimport { useInterval } from './hooks/useInterval';\n\nconst Content = styled.div`\n  position: absolute;\n  top: 100px;\n`;\n\nconst App = () => {\n  const [array, movingIndex, step] = useSortAlgorithm(getRandomArray);\n\n  const [isRunning, setIsRunning] = useState(false);\n\n  useInterval(step, isRunning ? 10 : null);\n\n  console.log(\"navigation re-render\");\n\n  const startSort = () => {\n    setIsRunning(true);\n  }\n\n  const stepSort = () => {\n    setIsRunning(false);\n    step();\n  }\n\n  console.log('app re-render');\n\n  return (\n    <div>\n      <Navigation startSort={startSort} stepSort={stepSort} />\n      <Content>\n        <Visualizer array={array} movingIndex={movingIndex} />\n      </Content>\n    </div>\n  )\n}\n\nexport default App;\n","import { useState } from 'react';\r\nimport { stepBubbleSort } from '../services/arrayHelpers';\r\n\r\nexport const useSortAlgorithm = (array) => {\r\n  const [stage, setStage] = useState(array);\r\n  const [movingIndex, setMovingIndex] = useState(null);\r\n\r\n  const stepSort = () => {\r\n    const [array, index] = stepBubbleSort(stage);\r\n    setStage(array);\r\n    setMovingIndex(index);\r\n  }\r\n\r\n  return [stage, movingIndex, stepSort]\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}