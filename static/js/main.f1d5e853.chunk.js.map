{"version":3,"sources":["components/visualizer/Column.js","components/visualizer/Grid.js","components/visualizer/Stage.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","height","index","movingIndex","Column","Grid","grid","map","value","key","Stage","button","setGrid","useState","delay","setDelay","setMovingIndex","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","i","length","j","temp","App","array","Array","from","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wfAGA,IAAMA,EAAYC,IAAOC,IAAV,IAIH,SAAAC,GAAK,OAAIA,EAAMC,OAAS,MACd,SAAAD,GAAK,OAAIA,EAAME,QAAUF,EAAMG,YAAc,YAAc,SAWlEC,EANA,SAAC,GAAkC,IAAjCH,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAC9B,OACE,kBAACN,EAAD,CAAWI,OAAQA,EAAQC,MAAOA,EAAOC,YAAaA,K,uRCT1D,IAAMN,EAAYC,IAAOC,IAAV,KAiBAM,EANF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMH,EAAR,EAAQA,YAAR,OACX,kBAAC,EAAD,KACGG,EAAKC,IAAI,SAACC,EAAON,GAAR,OAAkB,kBAAC,EAAD,CAAQO,IAAKP,EAAOD,OAAQO,EAAON,MAAOA,EAAOC,YAAaA,Q,qRCX9F,IAAMN,EAAYC,IAAOC,IAAV,KA2CAW,GApCIZ,IAAOa,OAAV,KAMF,SAAC,GAAqB,IAApBL,EAAmB,EAAnBA,KAAMM,EAAa,EAAbA,QAAa,EACPC,mBAAS,GADF,mBAC1BC,EAD0B,KACnBC,EADmB,OAEKF,mBAAS,MAFd,mBAE1BV,EAF0B,KAEba,EAFa,KAuBjC,OC1CK,SAAqBC,EAAUH,GACpC,IAAMI,EAAgBC,mBAEtBC,oBAAU,WACRF,EAAcG,QAAUJ,GACvB,CAACA,IAGJG,oBAAU,WAIR,GAAc,OAAVN,EAAgB,CAClB,IAAMQ,EAAKC,YAJb,WACEL,EAAcG,WAGeP,GAC7B,OAAO,WACLU,cAAcF,MAGjB,CAACR,IDsBJW,CAjBe,WACb,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAKqB,OAAS,EAAGD,IACnC,IAAK,IAAIE,EAAI,EAAGA,EAAItB,EAAKqB,OAASD,EAAI,EAAGE,IACvC,GAAItB,EAAKsB,GAAKtB,EAAKsB,EAAI,GAAI,CACzB,IAAIC,EAAOvB,EAAKsB,GAKhB,OAJAtB,EAAKsB,GAAKtB,EAAKsB,EAAI,GACnBtB,EAAKsB,EAAI,GAAKC,EACdjB,EAAQ,YAAIN,SACZU,EAAeY,GAKrBZ,GAAgB,GAChBD,EAAS,OAGSD,GAGlB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMR,KAAMA,EAAMH,YAAaA,OE/BtB2B,EAVH,WACV,IAAIC,EAAQC,MAAMC,KAAK,IAAID,MAAME,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,KAAM,kBAAMF,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,KADlG,EAGQvB,mBAASkB,GAHjB,mBAGTzB,EAHS,KAGHM,EAHG,KAKhB,OACE,kBAAC,EAAD,CAAON,KAAMA,EAAMM,QAASA,KCCZyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f1d5e853.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: ${props => props.height + 'em'};\r\n  background-color: ${props => props.index === props.movingIndex ? \"darkgreen\" : \"cyan\"};\r\n  border: 1px solid black;\r\n  width: 0.5em;\r\n`;\r\n\r\nconst Column = ({height, index, movingIndex}) => {\r\n  return (\r\n    <Container height={height} index={index} movingIndex={movingIndex} />\r\n  )\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Components\r\nimport Column from './Column';\r\n\r\nconst Container = styled.div`\r\n  box-sizing: border-box;\r\n  display: inline-flex;\r\n  flex-direction: row;\r\n  background-color: rgb(191, 191, 191);\r\n  transform: rotate(180deg);\r\n  height: auto;\r\n  width: auto;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst Grid = ({grid, movingIndex}) => (\r\n  <Container>\r\n    {grid.map((value, index) => <Column key={index} height={value} index={index} movingIndex={movingIndex} />)}\r\n  </Container>\r\n)\r\n\r\nexport default Grid;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Components\r\nimport Grid from './Grid';\r\n\r\nimport { useInterval } from '../../hooks/useInterval';\r\n\r\nconst Container = styled.div`\r\n  box-sizing: border-box;\r\n  height: auto;\r\n  width: auto;\r\n  margin: auto;\r\n`;\r\n\r\nconst StepButton = styled.button`\r\n  box-sizing: border-box;\r\n  height: 2em;\r\n  width: 4em;\r\n`;\r\n\r\nconst Stage = ({grid, setGrid}) => {\r\n  const [delay, setDelay] = useState(1);\r\n  const [movingIndex, setMovingIndex] = useState(null);\r\n  \r\n  const doStep = () => {\r\n    for (let i = 0; i < grid.length - 1; i++) {\r\n      for (let j = 0; j < grid.length - i - 1; j++) {\r\n        if (grid[j] > grid[j + 1]) {\r\n          let temp = grid[j];\r\n          grid[j] = grid[j + 1];\r\n          grid[j + 1] = temp;\r\n          setGrid([...grid]);\r\n          setMovingIndex(j);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    setMovingIndex(-1);\r\n    setDelay(null);\r\n  }\r\n\r\n  useInterval(doStep, delay);\r\n        \r\n  return (\r\n    <Container>\r\n      <Grid grid={grid} movingIndex={movingIndex} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Stage;","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React, { useState } from 'react';\n\n// Components\nimport Stage from './components/visualizer/Stage';\n\nconst App = () => {\n  let array = Array.from(new Array(Math.floor((Math.random() * 100) + 40)), () => Math.floor((Math.random() * 40) + 1));\n\n  const [grid, setGrid] = useState(array);\n\n  return (\n    <Stage grid={grid} setGrid={setGrid} />\n  )\n}\n\nexport default App;\n\n\n\n/* \n\nSorting arrays of integers using different algorithms\nThe index of the array will correspond to a column in a grid\nEach integer in the array will correspond to the length of a column\n\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}