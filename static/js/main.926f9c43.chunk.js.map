{"version":3,"sources":["services/arrayHelpers.js","components/navigation/_Navigation.js","components/sort/visualizer/Column.js","components/sort/visualizer/_Visualizer.js","components/sort/visualizer/Metrics.js","App.js","hooks/useBubbleSort.js","hooks/useInterval.js","serviceWorker.js","index.js"],"names":["getRandomArray","array","Array","from","Math","floor","random","console","log","StyledNavigation","styled","div","StyledButton","button","Navigation","startSort","stepSort","stopSort","onClick","StyledColumn","props","height","color","React","memo","index","Container","Visualizer","compareIndexes","sortedIndex","column","useCallback","value","key","map","StyledMetrics","Metrics","arraySize","numPasses","compareValues","isSwapping","Content","App","commonArray","useState","setArray","isSorted","setIsSorted","setNumPasses","setIndex","setCompareIndexes","setCompareValues","setIsSwapping","length","setSortedIndex","temp","newIndex","useBubbleSort","stepBubbleSort","bubbleSortArray","isRunning","setIsRunning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.926f9c43.chunk.js","sourcesContent":["export const getRandomArray = () => {\r\n  const array = Array.from(new Array(Math.floor((Math.random() * 60) + 40)), () => Math.floor((Math.random() * 399) + 1));\r\n  console.log(array);\r\n  return array;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledNavigation = styled.div`\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: auto;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  background: rgb(191, 191, 191);\r\n  border-radius: 3px;\r\n  border: 2px solid cyan;\r\n  margin: 1em 1em;\r\n  padding: 0.25em 1em;\r\n  font-family: monospace;\r\n  font-size: 18px;\r\n  text-shadow: -1px 0 1px black, 0 1px 1px black, 1px 0 1px black, 0 -1px 1px black;\r\n  color: cyan;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Navigation = ({startSort, stepSort, stopSort}) => {\r\n  // console.log(\"navigation re-render\");\r\n  return (\r\n    <StyledNavigation>\r\n      <StyledButton onClick={startSort} >Start</StyledButton>\r\n      <StyledButton onClick={stepSort} >Step</StyledButton>\r\n      <StyledButton onClick={stopSort} >Stop</StyledButton>\r\n    </StyledNavigation>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColumn = styled.div`\r\n  height: ${props => props.height + 'px'};\r\n  background-color: ${props => props.color};\r\n  border: 1px solid black;\r\n  width: 6px;\r\n`;\r\n\r\nconst Column = ({height, index, color}) => (\r\n  <StyledColumn height={height} index={index} color={color}>\r\n    {/* {console.log('column re-render')} */}\r\n  </StyledColumn>\r\n)\r\n\r\nexport default React.memo(Column);","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// Components\r\nimport Column from './Column';\r\n\r\n\r\nconst Container = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: row;\r\n  background-color: rgb(191, 191, 191);\r\n  height: auto;\r\n  width: auto;\r\n  transform: rotateX(180deg);\r\n`;\r\n\r\nconst Visualizer = ({array, compareIndexes, sortedIndex}) => {\r\n  // console.log('visualizer re-render');\r\n\r\n  const column = useCallback((value, index, compareIndexes, sortedIndex) => {\r\n    let color = \"cyan\";\r\n    if (index === compareIndexes[0]) color = \"palevioletred\";\r\n    if (index === compareIndexes[1]) color = \"darkgreen\"\r\n    if (index >= sortedIndex) color = \"palevioletred\"\r\n    return <Column key={index} height={value} index={index} color={color} />;\r\n  }, []);\r\n        \r\n  return (\r\n    <Container>\r\n      {array.map((value, index) => column(value, index, compareIndexes, sortedIndex))}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Visualizer;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledMetrics = styled.div`\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 400px;\r\n  height: 300px;\r\n  border: 1px solid red;\r\n`;\r\n\r\nconst Metrics = ({arraySize, numPasses, compareIndexes, compareValues, isSwapping}) => (\r\n  <StyledMetrics>\r\n    <h2>Size: {arraySize}</h2>\r\n    <h2>Passes: {numPasses}</h2>\r\n    { isSwapping ? (\r\n        <h2>Swapping values!</h2>\r\n      ) : (\r\n        <div>\r\n          <h2>Comparing: {compareIndexes[0]} and {compareIndexes[1]}</h2>\r\n          <h2>Comparing: {compareValues[0]} and {compareValues[1]}</h2>\r\n        </div>\r\n      )\r\n    }\r\n  </StyledMetrics>\r\n)\r\n\r\nexport default Metrics;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { getRandomArray } from './services/arrayHelpers';\n\n// Components\nimport Navigation from './components/navigation/_Navigation';\nimport Visualizer from './components/sort/visualizer/_Visualizer';\nimport Metrics from './components/sort/visualizer/Metrics';\n\n// Custom hooks\nimport { useBubbleSort } from './hooks/useBubbleSort';\nimport { useInterval } from './hooks/useInterval';\n\nconst Content = styled.div`\n  position: absolute;\n  margin-top: 5em;\n`;\n\nconst App = () => {\n  const [stepBubbleSort, bubbleSortArray, compareIndexes, compareValues, numPasses, isSwapping, sortedIndex, isSorted] = useBubbleSort(getRandomArray);\n  const [isRunning, setIsRunning] = useState(false);\n\n  // console.log('app re-render');\n\n  const startSort = () => {\n    setIsRunning(true);\n  }\n\n  const stopSort = () => {\n    setIsRunning(false);\n  }\n\n  const stepSort = () => {\n    stopSort();\n    stepBubbleSort();\n  }\n\n  useInterval(stepBubbleSort, (isRunning && !isSorted) ? 10 : null);\n\n  return (\n    <div>\n      <Navigation startSort={startSort} stepSort={stepSort} stopSort={stopSort} />\n      <Content>\n        <Visualizer array={bubbleSortArray} compareIndexes={compareIndexes} sortedIndex={sortedIndex} />\n        <Metrics arraySize={bubbleSortArray.length} compareIndexes={compareIndexes} compareValues={compareValues} numPasses={numPasses} isSwapping={isSwapping} />\n      </Content>\n    </div>\n  )\n}\n\nexport default App;\n","import { useState } from 'react';\r\n\r\nexport const useBubbleSort = (commonArray) => {\r\n  const [array, setArray] = useState(commonArray);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const [numPasses, setNumPasses] = useState(0);\r\n  const [index, setIndex] = useState(0);\r\n  const [compareIndexes, setCompareIndexes] = useState(['N/A', 'N/A']);\r\n  const [compareValues, setCompareValues] = useState(['N/A', 'N/A'])\r\n  const [isSwapping, setIsSwapping] = useState(false);\r\n  const [sortedIndex, setSortedIndex] = useState(array.length);\r\n\r\n  const stepBubbleSort = () => {\r\n    if (isSorted) return;\r\n\r\n    for (index; index < sortedIndex;) {\r\n      if (isSwapping) {\r\n        // Swap the values so the largest is on the right\r\n        let temp = array[index];\r\n        array[index] = array[index + 1];\r\n        array[index + 1] = temp;\r\n\r\n        setCompareIndexes([index + 1, index]);\r\n        setCompareValues([array[index + 1], array[index]]);\r\n        setIsSwapping(false);\r\n\r\n      } else {\r\n        setCompareIndexes([index, index + 1]);\r\n        setCompareValues([array[index], array[index + 1]]);\r\n      }\r\n\r\n      // Check to see if we need to swap before we increment the index\r\n      if (array[index] > array[index + 1]) {\r\n        setIsSwapping(true);\r\n        setArray(array);\r\n        return;\r\n      }\r\n\r\n      // If we've completed a full pass of the array, set the index to 0\r\n      // Otherwise, increment the index by 1\r\n      let newIndex = (index >= (sortedIndex - 2)) ? 0 : index + 1;\r\n      if (newIndex === 0) setNumPasses(numPasses + 1);\r\n      if (newIndex === 0) setSortedIndex((array[index] >= array[index + 1]) ? index : index + 1);\r\n      if (sortedIndex <= 1) setIsSorted(true);\r\n      setIndex(newIndex);\r\n      setArray(array);\r\n      return;\r\n    }\r\n  }\r\n\r\n  return [stepBubbleSort, array, compareIndexes, compareValues, numPasses, isSwapping, sortedIndex, isSorted];\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}